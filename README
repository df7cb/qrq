QRQ - yet another CW trainer for Linux/Unix - Version 0.2.0

Project website: http://fkurz.net/ham/qrq.html
-----------------------------------------------------------------------------

qrq is an open source morse telegraphy trainer, similar to the classic DOS
version of Rufz by DL4MM, for Linux and Unix operating systems.

It's not intended for learning telegraphy (have a look at radio.linux.org.au
for CW learning software or check out http://lcwo.net/), but to improve the
ability to copy callsigns at high speeds, as needed for example for Contesting. 

-----------------------------------------------------------------------------

INSTALL:

1. make [DESTDIR=/usr] [USE_OPENAL=NO] [OSX_PLATFORM=NO] [OSX_BUNDLE=YES]

Compiles qrq.  Optionally, you can compile against the OpenAL audio
library, instead of OSS.  This will create the executable
file, 'qrq' in the current directory. To run, qrq only needs the files
'qrqrc', 'toplist', and 'callbase.qcb', which are also in the current
directory. 

If you are building for OSX, you must compile against OpenAL, which is
installed by default when you install Xcode.  Also set OSX_PLATFORM=YES.
If you want to create the release as an OSX bundle, then choose
OSX_BUNDLE=YES.  

At your option, you can install 'qrq' globally:

2. make install [DESTDIR=/usr] [USE_OPENAL=NO] [OSX_PLATFORM=NO] [OSX_BUNDLE=YES]

By default, DESTDIR=/usr, so the executable will be in /usr/bin, the
callsign database in /usr/share/qrq/ and so on.  You can specify any
other destination directory. However, if you build for OSX and have
OSX_BUNDLE=YES, then make install will *not* install into DESTDIR but
will instead make a bundle called qrq.app in the current directory.
You can then drag and drop the qrq.app into your Applications folder if
you wish. 

When starting 'qrq' for the first time, it will copy 'qrqrc' and
'toplist' to ~/.qrq/.

3. Edit the configuration file 'qrqrc' according to your needs. 'qrq' first
searches in the current directory, then in ~/.qrq/, then in /usr/share/qrq for
this file.

4. If an older version of 'qrq' is already installed, you don't need to remove
it first.

-----------------------------------------------------------------------------
How to use it

Using qrq is simple: qrq sends 50 random calls from a database. After each
call, it waits for the user to enter what he heard and compares the entered
callsign with the one sent. If the callsign is copied correctly, the speed is
increased by 10CpM and full points are credited, if there were mistakes in the
callsign entered, the speed decreases by 10CpM and (depending on how many
letters were correct) only a fraction of the maximum points are credited.

A callsign can be heard again once by pressing F6, hitting F10 quits the
program. The INS key toggles between insert and overwrite mode in the callsign
field.

The possible speed ranges from 20 CpM (4 WpM) to infinity, the initial speed
can be set by the user.

There is a simple toplist function in qrq which makes it possible for the user
to keep track of his training success or to compare scores with others.
You can submit your highscores via e-Mail to mail@fkurz.net and they will
appear on the toplist published at http://fkurz.net/ham/qrqtop.html.
The toplist is not protected by any kind of checksum, it bases on your honesty.

As of version 0.0.7, the toplist file also includes a timestamp of the attempt,
which makes it possible to keep track of your training progress. Pressing F7
generates a graph score vs. date. Gnuplot required.

Options can be changed in the config file qrqrc or via the options menu (F5).
As of version 0.2.0, some additional training modes are available, which allow
e.g. unlimited usage of F6 (call repetition) and attempts that are longer than
the normal 50 calls.

A small Perl script, qrqscore, to synchronize the online-toplist
(http://fkurz.net/ham/qrqtop.php) with your local toplist is included as of
version 0.1.2.

-----------------------------------------------------------------------------

Download, License

Of course qrq is free software (free as in beer and free as in freedom) and
published under the GPL 2.

If you wish to use the files OpenAlImp.h, OpenAlImp.cpp, OpenAlStream.h,
OpenAlStream.cpp in a project separate from qrq, they are licensed
under the MIT license.

-----------------------------------------------------------------------------

Contact, Feedback

I am always interested in any kind of feedback concerning qrq. If you have any
suggestions, questions, feature-requests etc., don't hesitate a minute and
contact me via eMail (mail@fkurz.net) or ICQ (169955833).

...-.-
